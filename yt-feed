#!/usr/bin/env python3

import os
import sys
import time
import tempfile
import subprocess
import cmd
import json
import feedparser

YOUTUBE_FEED = "https://www.youtube.com/feeds"
with open("{}/.yt-feed.json".format(os.getenv("HOME"))) as f:
    config = json.load(f)

class YTFShell(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.prompt = "> "
        self.list_data = dict()

    def do_list(self, arg):
        for c in config["channels"]:
            channel_id = c["channel-id"]
            f = feedparser.parse("{burl}/videos.xml?channel_id={cid}".format(
                burl=YOUTUBE_FEED,
                cid=channel_id
            ))

            print(c["name"])
            for (i, e) in enumerate(f.entries[:10]):
                self.list_data["{}{}".format(c["key"], i)] = e
                print("\t{}{}: {}".format(c["key"], i, e.title))

    def do_play(self, arg):
        if not self.list_data:
            print("Run list command first")
            return

        for token in arg.split():
            (fd, fname) = tempfile.mkstemp(prefix="ytf-")
            os.close(fd)
            os.remove(fname)

            if token not in self.list_data:
                print("Can't parse video handle:[{}]".format(token))

            subprocess.Popen(
                [
                    "youtube-dl",
                    "-o", fname,
                    "--no-part",
                    self.list_data[token].link
                ],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )

            print("Download started.  Sleeping configured amount.")
            time.sleep(config["player-delay"])

            # If we run on cygwin, there's no guarantee the external player
            # will understand the cygwin root directory.  Go there directly.
            os.chdir(os.path.dirname(fname))
            fname = os.path.basename(fname)

            subprocess.check_call([
                config["player-cmd"],
                fname
            ] + config.get("player-opts", []))

            os.remove(fname)

    def do_EOF(self, arg):
        sys.exit(0)

if __name__ == "__main__":
    YTFShell().cmdloop()
